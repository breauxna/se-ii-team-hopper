;; The first four lines of this file were added by Dracula.
;; They tell DrScheme that this is a Dracula Modular ACL2 program.
;; Leave these lines unchanged so that DrScheme can properly load this file.
#reader(planet "reader.rkt" ("cce" "dracula.plt") "modular" "lang")
;@author: Kyle Morse
;@date: Feb 20, 2012
;@version: 1.0

;(require "specifications.lisp")

(module MOperations
  
  (include-book "io-utilities" :dir :teachpacks)
  
  (defun number? (str)
    (if (equal (rat->str (str->rat str) 0) str)
        t
        nil))
  
  (defun crop (args)
    (if (and (number? (car args)) 
             (number? (cadr args)) 
             (number? (caddr args)) 
             (number? (cadddr args)))
        (list 'crop (list (str->rat (car args))
                          (str->rat (cadr args))
                          (str->rat (caddr args))
                          (str->rat (cadddr args))))
        nil))
  (defun blur (args)
    (list 'blur args))
  (defun unsharpmask (args)
    (list 'unsharpmask args))
  (defun merge (args)
    (if (consp (car args))
        (list 'merge args)
        nil))
  (defun border (args)
    (if (number? (car args))
        (list 'border (list (str->rat (car args))))
        nil))
  (defun negative (args)
    (list 'unsharpmask args))
  (defun histogram (args)
    (list 'unsharpmask args))
  (defun rotate (args)
    (if (number? (car args))
        (list 'rotate (list (str->rat (car args))))
        nil))
  (defun resize (args)
    (if (number? (car args))
        (list 'resize (list (str->rat (car args))))
        nil))
  (defun greyscale (args)
    (list 'greyscale args))
  (defun saturation (args)
    (if (number? (car args))
        (list 'saturation (list (str->rat (car args))))
        nil))
  (defun contrast (args)
    (list 'contrast args))
  (defun splitcolor (args)
    (list 'splitcolor args))
  (defun mirror (args)
    (list 'mirror args))
  (defun hue (args)
    (if (number? (car args))
        (list 'hue (list (str->rat (car args))))
        nil))
  (defun mask (args)
    (if (stringp (car args))
        (list 'mask args)
        nil))
  (defun despeckle (args)
    (list 'despeckle args))
  
  (defun operation (op args)
    (cond ((string-equal op "crop") (crop args))
          ((string-equal op "blur") (blur args))
          ((string-equal op "unsharpmask") (unsharpmask args))
          ((string-equal op "merge") (merge args))
          ((string-equal op "border") (border args))
          ((string-equal op "negative") (negative args))
          ((string-equal op "histogram") (histogram args))
          ((string-equal op "rotate") (rotate args))
          ((string-equal op "resize") (resize args))
          ((string-equal op "greyscale") (greyscale args))
          ((string-equal op "saturation") (saturation args))
          ((string-equal op "contrast") (contrast args))
          ((string-equal op "splitcolor") (splitcolor args))
          ((string-equal op "mirror") (mirror args))
          ((string-equal op "hue") (hue args))
          ((string-equal op "mask") (mask args))
          ((string-equal op "despeckle") (despeckle args))
          (t nil))) 
             
  ;(export IOperations)
  )